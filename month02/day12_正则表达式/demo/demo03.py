import re

"""
正则表达式的转义:
    如果使用正则表达式匹配特殊字符则需要加 \ 表示转义。
"""
r = re.findall(r"\d+\.?\d*", "45 1 1.24 4.5")
print(r)
r = re.findall(r"\$\d+", "日新:$100")
print(r)

"""
    贪婪模式与非贪婪模式
        贪婪模式: 默认情况下，匹配重复的元字符总是尽可能多的向后匹配内容。比如: * + ? {m,n}
        非贪婪模式(懒惰模式): 让匹配重复的元字符尽可能少的向后匹配内容。
        贪婪模式后加上?--->非贪婪模式
"""
r = re.findall(r"\d+?", "1234567")
print(r)
r = re.findall(r'\[.+?\]', "[1-5]这是xxx注释[6/10]xxx[*#006a]")
print(r)

"""
    正则表达式分组(re.search().group())
        定义:
            在正则表达式中，以()建立正则表达式的内部分组，子组是正则表达式的一部分，可以作为内部整体操作对象。
        作用:
            1.可以被作为整体操作，改变元字符的操作对象
            2.可以通过编程语言某些接口获取匹配内容中，子组对应的内容部分(.group(n))
            3.可以给正则表达式的子组起一个名字，表达该子组的意义。这种有名称的子组即为捕获组。
                格式：(?P<name>pattern)
                eg:
                    In : re.search(r'(?P<pig>ab)+',"ababababab").group('pig')
                    Out: 'ab'
        注意事项:
            1.一个正则表达式中可以包含多个子组
            2.子组可以嵌套，但是不要重叠或者嵌套结构复杂
            3.子组序列号一般从外到内，从左到右计数
"""
r = re.search(r"(ab)+", "abababababa").group()
print(r)
r = re.search(r'(?P<pig>ab)+', "ababababab").group()
print(r)
