"""
    复习
        函数内存
            1. 创建函数代码,加载到内存中,不执行函数体.
            2. 调用函数开辟空间(栈帧),函数执行过后空间释放.
        函数参数
            实际参数：调用者通过？方式传递数据
                位置实参：位置/顺序
                    序列实参：拆
                关键字实参：名字
                    字典实参：拆

            形式参数：约束实参
                默认形参：可选
                位置形参：必须
                    星号元组形参：合(位置实参)
                命名关键字形参：实参必须是关键字,星号以后的参数
                    双星号字典形参：合(关键字实参)
"""


def func01(p1, p2):
    # 修改的是栈帧中的变量
    p1 = "a"
    # 2. 修改的是可变对象
    p2[0] = "b"  # 3. 无需通过return,调用者也能获得结果


a = ["A"]
b = ["B"]  # 1, 传入可变对象
func01(a, b)
print(a)  # ["A"]
print(b)  # ["b"]

func01(p2=b, p1=a)


def func02(p1=0, p2=0):
    pass


func02(p2=10)

list01 = "悟空"
func02(*list01)

dict01 = {"p1": "a", "p2": "b"}
func02(**dict01)


def func03(p1, *, p2, p3):
    pass


func03(1, p2=2, p3=3)


def func04(p1, *args, p2, p3):
    pass


func04(1, 2, 3, 4, 5, p2=6, p3=7)

# def print(*args, sep=' ', end='\n', file=None):
# 八戒-悟空-唐僧
print("八戒", "悟空", "唐僧", sep="-", end=" ")
print("八戒", "悟空", "唐僧", "-"," ")